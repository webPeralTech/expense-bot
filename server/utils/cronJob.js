const cron = require('node-cron');
const nodemailer = require('nodemailer');
const Expense = require('../models/Expense');

// Create email transporter
const createTransporter = () => {
  return nodemailer.createTransporter({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
};

// Generate HTML email content
const generateEmailHTML = (monthlyData, monthName, year) => {
  const { totalExpenses, totalIncome, netAmount, expenseCount, incomeCount, transactions } = monthlyData;
  
  let expenseRows = '';
  let incomeRows = '';
  
  transactions.forEach((transaction, index) => {
    const date = new Date(transaction.date).toLocaleDateString('en-IN');
    const row = `
      <tr>
        <td style="padding: 8px; border-bottom: 1px solid #eee;">${index + 1}</td>
        <td style="padding: 8px; border-bottom: 1px solid #eee;">${transaction.note}</td>
        <td style="padding: 8px; border-bottom: 1px solid #eee; text-align: right; color: ${transaction.type === 'income' ? '#4CAF50' : '#FF6B6B'};">â‚¹${transaction.amount.toFixed(2)}</td>
        <td style="padding: 8px; border-bottom: 1px solid #eee;">${date}</td>
        <td style="padding: 8px; border-bottom: 1px solid #eee; text-transform: capitalize;">${transaction.type}</td>
      </tr>
    `;
    
    if (transaction.type === 'income') {
      incomeRows += row;
    } else {
      expenseRows += row;
    }
  });

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Monthly Financial Report - ${monthName} ${year}</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #64BC46; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
        .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
        .summary-box { background-color: white; padding: 15px; margin: 15px 0; border-radius: 5px; border-left: 4px solid #64BC46; }
        .income-box { border-left-color: #4CAF50; }
        .expense-box { border-left-color: #FF6B6B; }
        .net-box { border-left-color: #2196F3; }
        table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        th { background-color: #64BC46; color: white; padding: 12px 8px; text-align: left; }
        .total-row { font-weight: bold; background-color: #f0f0f0; }
        .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
        .positive { color: #4CAF50; }
        .negative { color: #FF6B6B; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>ðŸ’° Monthly Financial Report</h1>
          <p>${monthName} ${year}</p>
        </div>
        
        <div class="content">
          <div class="summary-box">
            <h3>ðŸ“Š Summary</h3>
            <p><strong>Total Income:</strong> <span class="positive">â‚¹${totalIncome.toFixed(2)}</span></p>
            <p><strong>Total Expenses:</strong> <span class="negative">â‚¹${totalExpenses.toFixed(2)}</span></p>
            <p><strong>Net Amount:</strong> <span class="${netAmount >= 0 ? 'positive' : 'negative'}">â‚¹${netAmount.toFixed(2)}</span></p>
            <p><strong>Income Transactions:</strong> ${incomeCount}</p>
            <p><strong>Expense Transactions:</strong> ${expenseCount}</p>
          </div>
          
          <h3>ðŸ“‹ Transaction Details</h3>
          <table>
            <thead>
              <tr>
                <th>#</th>
                <th>Description</th>
                <th style="text-align: right;">Amount (â‚¹)</th>
                <th>Date</th>
                <th>Type</th>
              </tr>
            </thead>
            <tbody>
              ${expenseRows}
              ${incomeRows}
              <tr class="total-row">
                <td colspan="2"><strong>Net Amount</strong></td>
                <td style="text-align: right;"><strong class="${netAmount >= 0 ? 'positive' : 'negative'}">â‚¹${netAmount.toFixed(2)}</strong></td>
                <td></td>
                <td></td>
              </tr>
            </tbody>
          </table>
          
          <div class="summary-box">
            <h3>ðŸ’¡ Financial Summary</h3>
            <p><strong>Total Income:</strong> <span class="positive">â‚¹${totalIncome.toFixed(2)}</span></p>
            <p><strong>Total Expenses:</strong> <span class="negative">â‚¹${totalExpenses.toFixed(2)}</span></p>
            <p><strong>Net Savings:</strong> <span class="${netAmount >= 0 ? 'positive' : 'negative'}">â‚¹${netAmount.toFixed(2)}</span></p>
          </div>
        </div>
        
        <div class="footer">
          <p>This report was automatically generated by your Financial Tracker app.</p>
        </div>
      </div>
    </body>
    </html>
  `;
};

// Send monthly email report
const sendMonthlyReport = async () => {
  try {
    // Get previous month's data
    const now = new Date();
    const previousMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const lastDayOfPreviousMonth = new Date(now.getFullYear(), now.getMonth(), 0);
    
    const transactions = await Expense.find({
      date: { 
        $gte: previousMonth, 
        $lte: lastDayOfPreviousMonth 
      }
    });
    
    if (transactions.length === 0) {
      console.log('No transactions found for previous month, skipping email report');
      return;
    }
    
    const totalExpenses = transactions
      .filter(t => t.type === 'expense')
      .reduce((sum, transaction) => sum + transaction.amount, 0);
    
    const totalIncome = transactions
      .filter(t => t.type === 'income')
      .reduce((sum, transaction) => sum + transaction.amount, 0);
    
    const netAmount = totalIncome - totalExpenses;
    
    const monthlyData = {
      totalExpenses,
      totalIncome,
      netAmount,
      expenseCount: transactions.filter(t => t.type === 'expense').length,
      incomeCount: transactions.filter(t => t.type === 'income').length,
      transactions: transactions
    };
    
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    
    const monthName = monthNames[previousMonth.getMonth()];
    const year = previousMonth.getFullYear();
    
    const transporter = createTransporter();
    const emailHTML = generateEmailHTML(monthlyData, monthName, year);
    
    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: `${process.env.EMAIL_TO_1}, ${process.env.EMAIL_TO_2}`,
      subject: `ðŸ’° Monthly Financial Report - ${monthName} ${year}`,
      html: emailHTML
    };
    
    await transporter.sendMail(mailOptions);
    console.log(`Monthly financial report sent for ${monthName} ${year}`);
    
  } catch (error) {
    console.error('Error sending monthly report:', error);
  }
};

// Setup cron job to run on 1st of every month at 9:00 AM
const setupCronJob = () => {
  cron.schedule('0 9 1 * *', () => {
    console.log('Running monthly financial report cron job...');
    sendMonthlyReport();
  }, {
    scheduled: true,
    timezone: "Asia/Kolkata"
  });
  
  console.log('Monthly financial report cron job scheduled (1st of every month at 9:00 AM)');
};

module.exports = { setupCronJob, sendMonthlyReport }; 